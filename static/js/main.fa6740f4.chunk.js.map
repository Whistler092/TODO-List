{"version":3,"sources":["reducers/TodoReducer.js","actions/actionsTypes.js","reducers/FilterReducer.js","reducers/MainReducer.js","actions/actionsCreator.js","containers/CreateTodo.js","containers/Table.js","App.js","serviceWorker.js","index.js"],"names":["INITIAL_DATA","savedData","localStorage","getItem","JSON","parse","persistList","data","removeItem","setItem","stringify","TodoReducer","state","action","console","log","type","id","text","completed","dataToggle","map","todo","filter","visibilityFilter","combineReducers","todos","addTodo","replace","c","crypto","getRandomValues","Uint8Array","toString","deleteTodo","toggleTodo","setVisibilityFilter","style","cancel","marginTop","marginRight","CreateTodo","props","handleKeyDown","e","key","todotext","setState","onChangeTodoText","bind","this","target","value","className","onChange","placeholder","onKeyDown","onClick","Component","connect","dispatch","bindActionCreators","styles","nav","table","color","fontSize","noItems","ShowItemsList","todosList","scope","textDecoration","ShowNoItemsMessage","role","Table","length","getVisibleTodos","t","Error","App","date","Date","setInterval","Boolean","window","location","hostname","match","store","compose","devToolsExtension","f","createStore","MainReducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fa6740f4.chunk.js","sourcesContent":["\n\nimport { ADD_TODO, REMOVE_TODO, TOGGLE_TODO } from \"../actions/actionsTypes\";\n\nlet INITIAL_DATA = []\n\nlet savedData = localStorage.getItem(\"data\")\nif (savedData) {\n    INITIAL_DATA = JSON.parse(savedData);\n}\n\nconst persistList = data => {\n    localStorage.removeItem(\"data\");\n    localStorage.setItem(\"data\", JSON.stringify(data))\n    return data;\n}\n\nconst TodoReducer = (state = INITIAL_DATA, action) => {\n    console.log(action.type, action)\n    switch (action.type) {\n        case ADD_TODO:\n            let data = [\n                ...state, {\n                    id: action.id,\n                    text: action.text,\n                    completed: false\n                }\n            ]\n            return persistList(data);\n        case TOGGLE_TODO:\n            let dataToggle = state.map(todo => (todo.id === action.id)\n                ? { ...todo, completed: !todo.completed } : todo)\n\n            return persistList(dataToggle)\n        case REMOVE_TODO:\n            return persistList(state.filter(todo => todo.id !== action.id));\n        default:\n            return state\n    }\n}\n\nexport default TodoReducer","/// constants for actions\n\nexport const ADD_TODO = 'ADD_TODO'\nexport const TOGGLE_TODO = 'TOGGLE_TODO'\nexport const REMOVE_TODO = 'REMOVE_TODO'\nexport const SHOW_ALL = 'SHOW_ALL'\nexport const SHOW_COMPLETED = 'SHOW_COMPLETED'\nexport const SHOW_ACTIVE = 'SHOW_ACTIVE'\nexport const SET_VISIBILITY_FILTER = 'SET_VISIBILITY_FILTER'","import {\n    SHOW_ALL,\n    SET_VISIBILITY_FILTER\n  } from \"../actions/actionsTypes\";\n\nconst visibilityFilter = (state = SHOW_ALL, action ) => {\n    switch (action.type) {\n        case SET_VISIBILITY_FILTER:\n            return action.filter\n        default:\n            return state\n    }\n}\n\nexport default visibilityFilter","import { combineReducers } from \"redux\";\nimport todos from \"./TodoReducer\";\nimport visibilityFilter from \"./FilterReducer\";\n\nexport default combineReducers({\n    todos,\n    visibilityFilter\n})","import {\n    ADD_TODO,\n    REMOVE_TODO,\n    TOGGLE_TODO,\n    SET_VISIBILITY_FILTER\n} from \"./actionsTypes\";\n\n/*\n    the actions creators that are functions that create actions, \n    very useful for example for making HTTP requests before \n    sending the payloads to the reducers.\n*/\n\nfunction uuidv4() {\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\n        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\n    );\n    //return \"\"\n}\n\n\nexport const addTodo = text => ({\n    type: ADD_TODO,\n    id: uuidv4(),\n    text\n})\n\nexport const deleteTodo = (id) => ({\n    type: REMOVE_TODO,\n    id: id\n})\n\nexport const toggleTodo = (id) => ({\n    type: TOGGLE_TODO,\n    id: id\n})\n\nexport const setVisibilityFilter = filter => ({\n    type: SET_VISIBILITY_FILTER,\n    filter\n})","import React, { Component } from 'react'\nimport { connect } from \"react-redux\";\nimport { addTodo } from \"../actions/actionsCreator\";\nimport { bindActionCreators } from \"redux\";\n\nconst style = {\n    cancel: {\n        marginTop: \"25px\", \n        marginRight: \"15px\"\n    },\n    addTodo: {\n        marginTop: \"25px\"\n    }\n}\n\nclass CreateTodo extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            todotext : ''\n        }\n\n        this.onChangeTodoText = this.onChangeTodoText.bind(this)\n    }\n\n    handleKeyDown = (e) => {\n        console.log(\"handleKeyDown\", e)\n        if (e.key === 'Enter') {\n            this.props.addTodo(this.state.todotext);\n            this.setState({ todotext : '' })\n        }\n      }\n\n    onChangeTodoText(e){\n        this.setState({\n            todotext: e.target.value\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"form-group row\">\n                <div className=\"col-sm-10\">\n                    <input onChange={this.onChangeTodoText} \n                            value={this.state.todotext}\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"todotext\"\n                            placeholder=\"add todo here\" \n                            onKeyDown={this.handleKeyDown} />\n\n                    <button type=\"button\" \n                            onClick={() => this.setState({ todotext: '' })}\n                            style={style.cancel}\n                            className=\"btn btn-danger\" >Cancel</button>\n                    <button type=\"button\" \n                            onClick={() => {\n                                this.props.addTodo(this.state.todotext);\n                                this.setState({ todotext : '' })\n                            } }\n                            style={style.addTodo}\n                            className=\"btn btn-success\" >Add Todo</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n        addTodo\n    } , dispatch)\n}\n\nexport default connect(null, mapDispatchToProps)(CreateTodo)\n","import React, { Component } from 'react'\nimport { bindActionCreators } from 'redux'\nimport { connect } from \"react-redux\";\nimport { SHOW_ALL, SHOW_COMPLETED, SHOW_ACTIVE } from '../actions/actionsTypes'\nimport {\n    deleteTodo,\n    toggleTodo,\n    setVisibilityFilter\n} from \"../actions/actionsCreator\";\n\nconst styles = {\n    nav: { marginTop: \"60px\" },\n    table: { marginTop: \"60px\" },\n    deleteTodo: {\n        color: \"white\",\n        fontSize: \"20pt\",\n        marginRight: \"20px\"\n    },\n    toggleTodo: { color: \"white\", fontSize: \"20pt\" },\n    noItems: { marginTop: \"50px\" }\n}\n\nfunction ShowItemsList({ todosList, deleteTodo, toggleTodo }) {\n    return (<table className=\"table table-hover table-dark\">\n        <thead>\n            <tr>\n                <th scope=\"col\">Todos</th>\n                <th scope=\"col\">Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            {todosList.map(todo => (\n                <tr key={todo.id}>\n                    <td style={{ textDecoration: todo.completed ? \"line-through\" : \"none\" }}>\n                        {todo.completed === true ? \"✅ \" : \"📌 \"}{todo.text} \n                    </td>\n                    <td>\n                        <span className=\"fas fa-minus-circle\"\n                            onClick={() => deleteTodo(todo.id)}\n                            style={styles.deleteTodo}\n                        />\n                        <span className=\"fas fa-check-circle\"\n                            onClick={() => toggleTodo(todo.id)}\n                            style={styles.toggleTodo} />\n                    </td>\n                </tr>\n            ))}\n        </tbody>\n\n    </table>)\n}\n\nfunction ShowNoItemsMessage() {\n    return <div\n        style={styles.noItems}\n        className=\"col-lg-10 col-md-10 col-xs-12 col-sm-12 offset-lg-1\"\n    >\n        <div className=\"alert alert-danger\" role=\"alert\">\n            Todo List is empty or Filter results show no results\n            </div>\n    </div>\n}\n\nclass Table extends Component {\n    render() {\n        return (\n            <div className=\"col-lg-10 offset-lg-1 col-md-10 col-sm-12 col-xs-12\">\n                <nav style={{ marginTop: \"60px\" }}>\n                    <ol className=\"breadcrumb\">\n                        <li\n                            className={\"breadcrumb-item \" + (this.props.visibilityFilter === SHOW_ALL ? 'active' : '')}\n                            onClick={() => this.props.setVisibilityFilter(SHOW_ALL)}\n                        >\n                            All\n            </li>\n                        <li\n                            className={\"breadcrumb-item \" + (this.props.visibilityFilter === SHOW_COMPLETED ? 'active' : '')}\n                            onClick={() => this.props.setVisibilityFilter(SHOW_COMPLETED)}\n                        >\n                            Completed\n            </li>\n                        <li\n                            className={\"breadcrumb-item \" + (this.props.visibilityFilter === SHOW_ACTIVE ? 'active' : '')}\n                            onClick={() => this.props.setVisibilityFilter(SHOW_ACTIVE)}\n                        >\n                            Active\n            </li>\n                    </ol>\n                </nav>\n                {this.props.todos.length !== 0 ?\n                    <ShowItemsList todosList={this.props.todos}\n                        deleteTodo={this.props.deleteTodo} toggleTodo={this.props.toggleTodo} ></ShowItemsList>\n                    : <ShowNoItemsMessage ></ShowNoItemsMessage>}\n            </div>\n        )\n    }\n}\n\nconst getVisibleTodos = (todos, filter) => {\n    switch (filter) {\n        case SHOW_ALL:\n            return todos;\n        case SHOW_COMPLETED:\n            return todos.filter(t => t.completed);\n        case SHOW_ACTIVE:\n            return todos.filter(t => !t.completed);\n        default:\n            throw new Error(\"Unknow filter: \" + filter);\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        todos: getVisibleTodos(state.todos, state.visibilityFilter),\n        visibilityFilter: state.visibilityFilter\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return bindActionCreators(\n        {\n            deleteTodo,\n            toggleTodo,\n            setVisibilityFilter\n        },\n        dispatch\n    )\n}\n/*The mapStateToProps is responsible for getting the state from the Redux Store \nand inject as Props to the React app. \n\nThe mapDispatchToProps is responsible to dispatch the actions creators.\n*/\nexport default connect(mapStateToProps, mapDispatchToProps)(Table)","import React, { Component } from 'react';\nimport CreateTodo from './containers/CreateTodo'\nimport Table from './containers/Table'\nimport Clock from 'react-clock';\n\nclass App extends Component {\n  state = {\n    date: new Date(),\n  }\n\n  componentDidMount() {\n    setInterval(\n      () => this.setState({ date: new Date() }),\n      1000\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\" style={{ marginTop: \"3em\" }}>\n          <h1>Pending tasks </h1>\n          <strong>... of the day</strong>\n          <div className=\"row\" style={{ marginTop: \"3em\" }}>\n            <div className=\"col-lg-10 offset-lg-2 col-md-10 col-sm-12 col-xs-12\">\n              <Clock\n                value={this.state.date}\n              />\n            </div>\n          </div>\n          <div className=\"row\" style={{ marginTop: \"3em\" }}>\n            <div className=\"col-lg-10 offset-lg-2 col-md-10 col-sm-12 col-xs-12\">\n              <CreateTodo />\n            </div>\n\n          </div>\n          <Table />\n        </div>\n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport {\n    createStore,\n    // applyMiddleware,\n    compose\n} from \"redux\";\nimport MainReducer from \"./reducers/MainReducer\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n/*We use compose just for enabling the redux \ndevTools Extension, and the Provider component \nfrom react-redux library is responsive \nto connect everything from react and redux.\n*/\nconst store = compose(window.devToolsExtension\n    ? window.devToolsExtension() : f => f)(createStore)(MainReducer)\n\n\nReactDOM.render(<Provider store={store} >\n                    <App />\n                </Provider> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}